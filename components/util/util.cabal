cabal-version:       3.0
-- ^ Cabal package description format spec.
-- Actual package description below.
-- See: http://haskell.org/cabal/users-guide/

--
-- Package identification: name & version.
--
name:                util
-- Package version should follow the Haskell PVP (https://pvp.haskell.org).
-- PVP summary:      +-+------- breaking API changes
--                   | | +----- non-breaking API additions
--                   | | | +--- code changes with no API change
version:             0.1.0.0

--
-- Tell Hackage users a little bit about this package: a one-liner for
-- the gist of it (synopsis), a longer description, where it fits in
-- Hackage (category) and where it comes from (homepage).
--
synopsis: Project-wide utils.
description: Stuff shared by all packages in the project.
category:            Example, Expression Problem, Tagless Final
homepage:            https://github.com/c0c0n3/hasnix
maintainer:          https://github.com/c0c0n3/hasnix

--
-- The legalese.
--
license:             AGPL-3.0-only
-- license-file:        LICENSE
-- copyright:        (c) 2020-2021 Joe Bloggs


--
-- Warn about every dodgy code block under the sun (-Weverything), but
-- turn a blind eye to:
-- * Implicit prelude. If you use a Prelude replacement, you may want
--   to get warned about modules implicitly using the stock Prelude.
--   Otherwise, this is sort of annoying so we silence it.
-- * Missing import lists. There are times when I just want to import
--   most of the goodies from a module without having to write down
--   each and every one on the import line. So this guy gets silenced
--   too :-O
-- * Inferred safe imports. If you turn on Safe Haskell you can still
--   import a module M not explicitly flagged with Safe or Trustworthy
--   as long as GHC can infer it's Safe Haskell you're importing. But
--   next time you compile M could've become unsafe and your build
--   break. Hence the heads-up. Do I care? No, I'll fix stuff when it
--   breaks.
-- * Missing deriving strategies. With this on, GHC will moan if you
--   use old-school deriving of stock classes (Eq, Show, etc.) but to
--   get rid of the warning you'll have to turn on the deriving lang
--   extension and use the `stock` keyword which is (IMHO) overkill.
-- * Missing local signatures. Buys you a warning if you have a polymorphic
--   local binding without a signature. Not a good buy?
--
-- See:
-- * http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/using-warnings.html
-- * https://medium.com/mercury-bank/enable-all-the-warnings-a0517bc081c3
--
common compilation-warnings
  ghc-options:         -Weverything
                       -Wno-implicit-prelude
                       -Wno-missing-import-lists
                       -Wno-inferred-safe-imports
                       -Wno-missing-deriving-strategies
                       -Wno-missing-local-signatures


-- Control release build settings. Turn on with command line option: -frelease
flag release
  description: Make a release build.
  default:             False
  manual:              True


--
-- Release build settings.
-- * Turn any warning into a compilation error---anal retentivness!
--   (Use `-Wwarn=<wflag>` to stop treating specific warnings as errors.)
-- * Optimise code as much as possible---longer compilation times!
--
-- NOTE. Usually -O2 isn't really a game-changer and you should actually
-- test it makes your program go faster. In fact, `cabal check` will
-- moan about this setting since it'll make compilation time longer
-- for all your package users. Perhaps not a big deal, well as long
-- as you don't relase the package on Hackage...
common release-options
  if flag(release)
     ghc-options:      -Werror
                       -O2


library
  import:              compilation-warnings
  import:              release-options
  -- Directories containing source files.
  hs-source-dirs:      src
  -- Modules exported by the library.
  exposed-modules:     Util
  -- Modules included in this library but not exported.
  -- other-modules:
  -- Haskell packages from which we import modules. Specify the exact
  -- PVP version we developed & tested with so we know where we stand
  -- but accept newer compatible (according to the PVP) versions. E.g.
  -- `base ^>= 4.14.1.0` (same as `base >= 4.14.1.0 && < 4.15`) tells
  -- Cabal to consider any version up to (but less than) `4.15` when
  -- figuring out the build plan.
  build-depends:       base                 ^>= 4.14.1.0
                     , base-unicode-symbols ^>= 0.2.4.2
                     , text                 ^>= 1.2.4.1
  -- Turn on strict type safety across the board. As Simon Marlow put it:
  --   "For typical Haskell programmers, using {-# LANGUAGE Safe #-}
  --    will be like -Wall: something that is considered good practice
  --    from a hygiene point of view."
  -- See:
  -- * https://wiki.haskell.org/Safe_Haskell
  -- * http://downloads.haskell.org/~ghc/latest/docs/html/users_guide/safe_haskell.html
  default-extensions:  Safe
  -- Base language which the package is written in.
  default-language:    Haskell2010
